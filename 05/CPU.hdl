// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:
    // if (zx == 1) set x = 0        // 16-bit constant
    // if (nx == 1) set x = !x       // bitwise not
    // if (zy == 1) set y = 0        // 16-bit constant
    // if (ny == 1) set y = !y       // bitwise not
    // if (f == 1)  set out = x + y  // integer 2's complement addition
    // if (f == 0)  set out = x & y  // bitwise and
    // if (no == 1) set out = !out   // bitwise not
    // if (out == 0) set zr = 1
    // if (out < 0) set ng = 1

    //IN  
    //    x[16], y[16],  // 16-bit inputs        
    //    zx, // zero the x input?
    //    nx, // negate the x input?
    //    zy, // zero the y input?
    //    ny, // negate the y input?
    //    f,  // compute out = x + y (if 1) or x & y (if 0)
    //    no; // negate the out output?

    //OUT 
    //    out[16], // 16-bit output
    //    zr, // 1 if (out == 0), 0 otherwise
    //    ng; // 1 if (out < 0),  0 otherwise
    // 111a cccc ccdd djjj

    //IN in[16], load;
    //OUT out[16];
    
    // ALU
    ALU(x=OutputOfDRegister, y=OutputOfMuxTwo, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], out=outM, out=outALU, zr=zr, ng=ng);
    
    // D Register
    Register(in=outALU, load=instruction[4], out=OutputOfDRegister);
    
    // Mux16 One
    Mux16(a=instruction, b=outALU, sel=instruction[5], out=OutputOfMuxOne);
    
    // A Register
    Register(in=OutputOfMuxOne, load=instruction[15], out=OutputOfARegister, out[0..15]=addressM);

    // Mux16 Two
    Mux16(a=OutputOfARegister, b=inM, sel=instruction[12], out=OutputOfMuxTwo);

    Or(a=zr, b=ng, out=NotGreaterThanZero);
    Not(in=NotGreaterThanZero, out=GreaterThanZero);

    And(a=GreaterThanZero, b=instruction[0], out=JThreeComparison);
    And(a=zr, b=instruction[1], out=JTwoComparison);
    And(a=ng, b=instruction[2], out=JOneComparison);
    Or(a=JThreeComparison, b=JTwoComparison, out=temp);
    Or(a=temp, b=JOneComparison, out=load);
    Not(in=load, out=inc);
    /**
    * A 16-bit counter with load and reset control bits.
    * if      (reset[t] == 1) out[t+1] = 0
    * else if (load[t] == 1)  out[t+1] = in[t]
    * else if (inc[t] == 1)   out[t+1] = out[t] + 1  (integer addition)
    * else                    out[t+1] = out[t]
    */
    // PC
    PC(in=OutputOfARegister, load=load, inc=inc, reset=reset, out[0..15]=pc);

    And(a=instruction[3], b=instruction[3], out=writeM);
}